$date
	Mon Oct 27 12:24:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_simd_ai_accelerator $end
$var wire 64 ! vec_mac_out [63:0] $end
$var wire 32 " vec_activation_out [31:0] $end
$var wire 1 # result_valid $end
$var wire 8 $ power_status [7:0] $end
$var wire 1 % busy $end
$var parameter 32 & ACC_WIDTH $end
$var parameter 32 ' DATA_WIDTH $end
$var parameter 32 ( SIMD_LANES $end
$var parameter 32 ) WEIGHT_WIDTH $end
$var reg 1 * clk $end
$var reg 1 + data_valid $end
$var reg 1 , enable $end
$var reg 1 - rst_n $end
$var reg 1 . simd_start $end
$var reg 32 / vec_data_in [31:0] $end
$var reg 32 0 vec_weight_in [31:0] $end
$scope module dut $end
$var wire 1 * clk $end
$var wire 1 + data_valid $end
$var wire 1 , enable $end
$var wire 1 - rst_n $end
$var wire 1 . simd_start $end
$var wire 32 1 vec_data_in [31:0] $end
$var wire 32 2 vec_weight_in [31:0] $end
$var wire 8 3 power_status [7:0] $end
$var wire 1 4 power_gated $end
$var wire 4 5 mac_done [3:0] $end
$var wire 4 6 lane_enable [3:0] $end
$var wire 1 7 gated_clk $end
$var wire 1 % busy $end
$var wire 1 8 all_lanes_done $end
$var parameter 32 9 ACC_WIDTH $end
$var parameter 3 : ACTIVATION $end
$var parameter 32 ; DATA_WIDTH $end
$var parameter 3 < IDLE $end
$var parameter 3 = LOAD_VECTORS $end
$var parameter 3 > OUTPUT $end
$var parameter 3 ? SIMD_COMPUTE $end
$var parameter 32 @ SIMD_LANES $end
$var parameter 32 A WEIGHT_WIDTH $end
$var reg 3 B next_state [2:0] $end
$var reg 1 # result_valid $end
$var reg 3 C state [2:0] $end
$var reg 32 D vec_activation_out [31:0] $end
$var reg 64 E vec_mac_out [63:0] $end
$scope begin LANE[0] $end
$var wire 8 F lane_data [7:0] $end
$var wire 8 G lane_weight [7:0] $end
$var parameter 2 H i $end
$scope module act_lane $end
$var wire 1 - rst_n $end
$var wire 16 I data_in [15:0] $end
$var wire 1 7 clk $end
$var reg 8 J activation_out [7:0] $end
$upscope $end
$scope module mac_lane $end
$var wire 8 K data_in [7:0] $end
$var wire 1 L enable $end
$var wire 1 - rst_n $end
$var wire 8 M weight_in [7:0] $end
$var wire 1 7 clk $end
$var parameter 32 N ACCUM $end
$var parameter 32 O ACC_WIDTH $end
$var parameter 32 P DATA_WIDTH $end
$var parameter 32 Q DONE $end
$var parameter 32 R IDLE $end
$var parameter 32 S MULT $end
$var parameter 32 T WEIGHT_WIDTH $end
$var reg 16 U acc [15:0] $end
$var reg 1 V mac_done $end
$var reg 16 W mac_result [15:0] $end
$var reg 2 X s [1:0] $end
$upscope $end
$upscope $end
$scope begin LANE[1] $end
$var wire 8 Y lane_data [7:0] $end
$var wire 8 Z lane_weight [7:0] $end
$var parameter 2 [ i $end
$scope module act_lane $end
$var wire 1 - rst_n $end
$var wire 16 \ data_in [15:0] $end
$var wire 1 7 clk $end
$var reg 8 ] activation_out [7:0] $end
$upscope $end
$scope module mac_lane $end
$var wire 8 ^ data_in [7:0] $end
$var wire 1 _ enable $end
$var wire 1 - rst_n $end
$var wire 8 ` weight_in [7:0] $end
$var wire 1 7 clk $end
$var parameter 32 a ACCUM $end
$var parameter 32 b ACC_WIDTH $end
$var parameter 32 c DATA_WIDTH $end
$var parameter 32 d DONE $end
$var parameter 32 e IDLE $end
$var parameter 32 f MULT $end
$var parameter 32 g WEIGHT_WIDTH $end
$var reg 16 h acc [15:0] $end
$var reg 1 i mac_done $end
$var reg 16 j mac_result [15:0] $end
$var reg 2 k s [1:0] $end
$upscope $end
$upscope $end
$scope begin LANE[2] $end
$var wire 8 l lane_data [7:0] $end
$var wire 8 m lane_weight [7:0] $end
$var parameter 3 n i $end
$scope module act_lane $end
$var wire 1 - rst_n $end
$var wire 16 o data_in [15:0] $end
$var wire 1 7 clk $end
$var reg 8 p activation_out [7:0] $end
$upscope $end
$scope module mac_lane $end
$var wire 8 q data_in [7:0] $end
$var wire 1 r enable $end
$var wire 1 - rst_n $end
$var wire 8 s weight_in [7:0] $end
$var wire 1 7 clk $end
$var parameter 32 t ACCUM $end
$var parameter 32 u ACC_WIDTH $end
$var parameter 32 v DATA_WIDTH $end
$var parameter 32 w DONE $end
$var parameter 32 x IDLE $end
$var parameter 32 y MULT $end
$var parameter 32 z WEIGHT_WIDTH $end
$var reg 16 { acc [15:0] $end
$var reg 1 | mac_done $end
$var reg 16 } mac_result [15:0] $end
$var reg 2 ~ s [1:0] $end
$upscope $end
$upscope $end
$scope begin LANE[3] $end
$var wire 8 !" lane_data [7:0] $end
$var wire 8 "" lane_weight [7:0] $end
$var parameter 3 #" i $end
$scope module act_lane $end
$var wire 1 - rst_n $end
$var wire 16 $" data_in [15:0] $end
$var wire 1 7 clk $end
$var reg 8 %" activation_out [7:0] $end
$upscope $end
$scope module mac_lane $end
$var wire 8 &" data_in [7:0] $end
$var wire 1 '" enable $end
$var wire 1 - rst_n $end
$var wire 8 (" weight_in [7:0] $end
$var wire 1 7 clk $end
$var parameter 32 )" ACCUM $end
$var parameter 32 *" ACC_WIDTH $end
$var parameter 32 +" DATA_WIDTH $end
$var parameter 32 ," DONE $end
$var parameter 32 -" IDLE $end
$var parameter 32 ." MULT $end
$var parameter 32 /" WEIGHT_WIDTH $end
$var reg 16 0" acc [15:0] $end
$var reg 1 1" mac_done $end
$var reg 16 2" mac_result [15:0] $end
$var reg 2 3" s [1:0] $end
$upscope $end
$upscope $end
$scope module u_main_clock_gate $end
$var wire 1 * clk_in $end
$var wire 1 4" enable $end
$var wire 1 7 gated_clk $end
$var wire 1 5" test_en $end
$var reg 1 6" en_latched $end
$upscope $end
$scope module u_power_gate $end
$var wire 1 7 clk $end
$var wire 1 , module_active $end
$var wire 1 - rst_n $end
$var parameter 32 7" IDLE_THRESHOLD $end
$var reg 4 8" idle_count [3:0] $end
$var reg 1 4 power_gate_signal $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 7"
b1000 /"
b1 ."
b0 -"
b11 ,"
b1000 +"
b10000 *"
b10 )"
b11 #"
b1000 z
b1 y
b0 x
b11 w
b1000 v
b10000 u
b10 t
b10 n
b1000 g
b1 f
b0 e
b11 d
b1000 c
b10000 b
b10 a
b1 [
b1000 T
b1 S
b0 R
b11 Q
b1000 P
b10000 O
b10 N
b0 H
b1000 A
b100 @
b10 ?
b100 >
b1 =
b0 <
b1000 ;
b11 :
b10000 9
b1000 )
b100 (
b1000 '
b10000 &
$end
#0
$dumpvars
b0 8"
06"
05"
04"
b0 3"
b0 2"
01"
b0 0"
b0 ("
0'"
b0 &"
b0 %"
b0 $"
b0 ""
b0 !"
b0 ~
b0 }
0|
b0 {
b0 s
0r
b0 q
b0 p
b0 o
b0 m
b0 l
b0 k
b0 j
0i
b0 h
b0 `
0_
b0 ^
b0 ]
b0 \
b0 Z
b0 Y
b0 X
b0 W
0V
b0 U
b0 M
0L
b0 K
b0 J
b0 I
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
08
07
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
0.
0-
0,
0+
0*
0%
b0 $
0#
b0 "
b0 !
$end
#50000
1*
#100000
0*
#150000
1*
#200000
0*
1-
#250000
1*
#300000
16"
b101 G
b101 M
b11 Z
b11 `
b111 m
b111 s
b10 ""
b10 ("
b1010 F
b1010 K
b10100 Y
b10100 ^
b1111 l
b1111 q
b11001 !"
b11001 &"
14"
b1 B
0*
b10000001110000001100000101 0
b10000001110000001100000101 2
b11001000011110001010000001010 /
b11001000011110001010000001010 1
1+
1.
1,
#350000
b10 B
1%
b100010 $
b100010 3
b1 C
17
1*
#400000
07
0*
#450000
1'"
1r
1_
1L
b1111 6
b1000010 $
b1000010 3
b10 C
17
1*
#500000
07
0*
0.
#550000
b1 3"
b1 ~
b1 k
b1 X
17
1*
#600000
07
0*
#650000
b10 X
b110010 U
b10 k
b111100 h
b10 ~
b1101001 {
b10 3"
b110010 0"
17
1*
#700000
07
0*
#750000
b11 B
b11 3"
b1010010 $
b1010010 3
18
11"
b110010 $"
b110010 2"
b11 ~
1|
b1101001 o
b1101001 }
b11 k
1i
b111100 \
b111100 j
b11 X
b1111 5
1V
b110010 I
b110010 W
17
1*
#800000
07
0*
#850000
0'"
0r
0_
0L
b100 B
b0 6
b0 X
b110010 J
b0 k
b111100 ]
b0 ~
b1101001 p
b0 3"
b110010 %"
b1110010 $
b1110010 3
b11 C
17
1*
#900000
07
0*
#950000
b0 B
b100 C
01"
0|
0i
b10000010 $
b10000010 3
08
b0 5
0V
17
1*
#1000000
07
0*
#1050000
0%
b0 C
b100 $
b100 3
1#
b110010011010010011110000110010 "
b110010011010010011110000110010 D
b110010000000000110100100000000001111000000000000110010 !
b110010000000000110100100000000001111000000000000110010 E
17
1*
#1100000
07
0*
#1150000
b0 $
b0 3
0#
17
1*
#1200000
07
0*
#1250000
17
1*
#1300000
07
0*
#1350000
17
1*
#1400000
07
0*
#1450000
17
1*
#1500000
07
0*
#1550000
17
1*
